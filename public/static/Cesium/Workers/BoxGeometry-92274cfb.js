define([
  'exports',
  './when-8d13db60',
  './Check-70bec281',
  './Cartographic-f27b0939',
  './BoundingSphere-c409f092',
  './ComponentDatatype-5862616f',
  './GeometryAttribute-2243653a',
  './PrimitiveType-97893bc7',
  './GeometryAttributes-aacecde6',
  './arrayFill-9766fb2e',
  './GeometryOffsetAttribute-999fc023',
  './VertexFormat-fe4db402',
], function (e, t, a, r, n, i, o, m, u, s, y, f) {
  var p = new r.Cartesian3();
  function c(e) {
    var n = (e = t.defaultValue(e, t.defaultValue.EMPTY_OBJECT)).minimum,
      i = e.maximum;
    if (
      (a.Check.typeOf.object('min', n),
      a.Check.typeOf.object('max', i),
      t.defined(e.offsetAttribute) &&
        e.offsetAttribute === y.GeometryOffsetAttribute.TOP)
    )
      throw new a.DeveloperError(
        'GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.',
      );
    var o = t.defaultValue(e.vertexFormat, f.VertexFormat.DEFAULT);
    (this._minimum = r.Cartesian3.clone(n)),
      (this._maximum = r.Cartesian3.clone(i)),
      (this._vertexFormat = o),
      (this._offsetAttribute = e.offsetAttribute),
      (this._workerName = 'createBoxGeometry');
  }
  (c.fromDimensions = function (e) {
    var n = (e = t.defaultValue(e, t.defaultValue.EMPTY_OBJECT)).dimensions;
    a.Check.typeOf.object('dimensions', n),
      a.Check.typeOf.number.greaterThanOrEquals('dimensions.x', n.x, 0),
      a.Check.typeOf.number.greaterThanOrEquals('dimensions.y', n.y, 0),
      a.Check.typeOf.number.greaterThanOrEquals('dimensions.z', n.z, 0);
    var i = r.Cartesian3.multiplyByScalar(n, 0.5, new r.Cartesian3());
    return new c({
      minimum: r.Cartesian3.negate(i, new r.Cartesian3()),
      maximum: i,
      vertexFormat: e.vertexFormat,
      offsetAttribute: e.offsetAttribute,
    });
  }),
    (c.fromAxisAlignedBoundingBox = function (e) {
      return (
        a.Check.typeOf.object('boundingBox', e),
        new c({ minimum: e.minimum, maximum: e.maximum })
      );
    }),
    (c.packedLength =
      2 * r.Cartesian3.packedLength + f.VertexFormat.packedLength + 1),
    (c.pack = function (e, n, i) {
      return (
        a.Check.typeOf.object('value', e),
        a.Check.defined('array', n),
        (i = t.defaultValue(i, 0)),
        r.Cartesian3.pack(e._minimum, n, i),
        r.Cartesian3.pack(e._maximum, n, i + r.Cartesian3.packedLength),
        f.VertexFormat.pack(
          e._vertexFormat,
          n,
          i + 2 * r.Cartesian3.packedLength,
        ),
        (n[i + 2 * r.Cartesian3.packedLength + f.VertexFormat.packedLength] =
          t.defaultValue(e._offsetAttribute, -1)),
        n
      );
    });
  var x,
    b = new r.Cartesian3(),
    d = new r.Cartesian3(),
    l = new f.VertexFormat(),
    A = { minimum: b, maximum: d, vertexFormat: l, offsetAttribute: void 0 };
  (c.unpack = function (e, n, i) {
    a.Check.defined('array', e), (n = t.defaultValue(n, 0));
    var o = r.Cartesian3.unpack(e, n, b),
      m = r.Cartesian3.unpack(e, n + r.Cartesian3.packedLength, d),
      u = f.VertexFormat.unpack(e, n + 2 * r.Cartesian3.packedLength, l),
      s = e[n + 2 * r.Cartesian3.packedLength + f.VertexFormat.packedLength];
    return t.defined(i)
      ? ((i._minimum = r.Cartesian3.clone(o, i._minimum)),
        (i._maximum = r.Cartesian3.clone(m, i._maximum)),
        (i._vertexFormat = f.VertexFormat.clone(u, i._vertexFormat)),
        (i._offsetAttribute = -1 === s ? void 0 : s),
        i)
      : ((A.offsetAttribute = -1 === s ? void 0 : s), new c(A));
  }),
    (c.createGeometry = function (e) {
      var a = e._minimum,
        f = e._maximum,
        c = e._vertexFormat;
      if (!r.Cartesian3.equals(a, f)) {
        var x,
          b,
          d = new u.GeometryAttributes();
        if (c.position && (c.st || c.normal || c.tangent || c.bitangent)) {
          if (
            (c.position &&
              (((b = new Float64Array(72))[0] = a.x),
              (b[1] = a.y),
              (b[2] = f.z),
              (b[3] = f.x),
              (b[4] = a.y),
              (b[5] = f.z),
              (b[6] = f.x),
              (b[7] = f.y),
              (b[8] = f.z),
              (b[9] = a.x),
              (b[10] = f.y),
              (b[11] = f.z),
              (b[12] = a.x),
              (b[13] = a.y),
              (b[14] = a.z),
              (b[15] = f.x),
              (b[16] = a.y),
              (b[17] = a.z),
              (b[18] = f.x),
              (b[19] = f.y),
              (b[20] = a.z),
              (b[21] = a.x),
              (b[22] = f.y),
              (b[23] = a.z),
              (b[24] = f.x),
              (b[25] = a.y),
              (b[26] = a.z),
              (b[27] = f.x),
              (b[28] = f.y),
              (b[29] = a.z),
              (b[30] = f.x),
              (b[31] = f.y),
              (b[32] = f.z),
              (b[33] = f.x),
              (b[34] = a.y),
              (b[35] = f.z),
              (b[36] = a.x),
              (b[37] = a.y),
              (b[38] = a.z),
              (b[39] = a.x),
              (b[40] = f.y),
              (b[41] = a.z),
              (b[42] = a.x),
              (b[43] = f.y),
              (b[44] = f.z),
              (b[45] = a.x),
              (b[46] = a.y),
              (b[47] = f.z),
              (b[48] = a.x),
              (b[49] = f.y),
              (b[50] = a.z),
              (b[51] = f.x),
              (b[52] = f.y),
              (b[53] = a.z),
              (b[54] = f.x),
              (b[55] = f.y),
              (b[56] = f.z),
              (b[57] = a.x),
              (b[58] = f.y),
              (b[59] = f.z),
              (b[60] = a.x),
              (b[61] = a.y),
              (b[62] = a.z),
              (b[63] = f.x),
              (b[64] = a.y),
              (b[65] = a.z),
              (b[66] = f.x),
              (b[67] = a.y),
              (b[68] = f.z),
              (b[69] = a.x),
              (b[70] = a.y),
              (b[71] = f.z),
              (d.position = new o.GeometryAttribute({
                componentDatatype: i.ComponentDatatype.DOUBLE,
                componentsPerAttribute: 3,
                values: b,
              }))),
            c.normal)
          ) {
            var l = new Float32Array(72);
            (l[0] = 0),
              (l[1] = 0),
              (l[2] = 1),
              (l[3] = 0),
              (l[4] = 0),
              (l[5] = 1),
              (l[6] = 0),
              (l[7] = 0),
              (l[8] = 1),
              (l[9] = 0),
              (l[10] = 0),
              (l[11] = 1),
              (l[12] = 0),
              (l[13] = 0),
              (l[14] = -1),
              (l[15] = 0),
              (l[16] = 0),
              (l[17] = -1),
              (l[18] = 0),
              (l[19] = 0),
              (l[20] = -1),
              (l[21] = 0),
              (l[22] = 0),
              (l[23] = -1),
              (l[24] = 1),
              (l[25] = 0),
              (l[26] = 0),
              (l[27] = 1),
              (l[28] = 0),
              (l[29] = 0),
              (l[30] = 1),
              (l[31] = 0),
              (l[32] = 0),
              (l[33] = 1),
              (l[34] = 0),
              (l[35] = 0),
              (l[36] = -1),
              (l[37] = 0),
              (l[38] = 0),
              (l[39] = -1),
              (l[40] = 0),
              (l[41] = 0),
              (l[42] = -1),
              (l[43] = 0),
              (l[44] = 0),
              (l[45] = -1),
              (l[46] = 0),
              (l[47] = 0),
              (l[48] = 0),
              (l[49] = 1),
              (l[50] = 0),
              (l[51] = 0),
              (l[52] = 1),
              (l[53] = 0),
              (l[54] = 0),
              (l[55] = 1),
              (l[56] = 0),
              (l[57] = 0),
              (l[58] = 1),
              (l[59] = 0),
              (l[60] = 0),
              (l[61] = -1),
              (l[62] = 0),
              (l[63] = 0),
              (l[64] = -1),
              (l[65] = 0),
              (l[66] = 0),
              (l[67] = -1),
              (l[68] = 0),
              (l[69] = 0),
              (l[70] = -1),
              (l[71] = 0),
              (d.normal = new o.GeometryAttribute({
                componentDatatype: i.ComponentDatatype.FLOAT,
                componentsPerAttribute: 3,
                values: l,
              }));
          }
          if (c.st) {
            var A = new Float32Array(72),
              C = 0;
            (A[C++] = 0),
              (A[C++] = 0),
              (A[C++] = -1),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = -1),
              (A[C++] = 1),
              (A[C++] = 1),
              (A[C++] = -1),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = -1),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = -1),
              (A[C++] = 0),
              (A[C++] = 0),
              (A[C++] = -1),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = -1),
              (A[C++] = 1),
              (A[C++] = 1),
              (A[C++] = -1),
              (A[C++] = 0),
              (A[C++] = 0),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = 0),
              (A[C++] = 0),
              (A[C++] = 0),
              (A[C++] = 0),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = 1),
              (A[C++] = 1),
              (A[C++] = 1),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = 1),
              (A[C++] = 1),
              (A[C++] = 1),
              (A[C++] = 0),
              (A[C++] = 1),
              (A[C++] = 1),
              (d.st = new o.GeometryAttribute({
                componentDatatype: i.ComponentDatatype.FLOAT,
                componentsPerAttribute: 3,
                values: A,
              }));
          }
          if (c.tangent) {
            var v = new Float32Array(72);
            (v[0] = 1),
              (v[1] = 0),
              (v[2] = 0),
              (v[3] = 1),
              (v[4] = 0),
              (v[5] = 0),
              (v[6] = 1),
              (v[7] = 0),
              (v[8] = 0),
              (v[9] = 1),
              (v[10] = 0),
              (v[11] = 0),
              (v[12] = -1),
              (v[13] = 0),
              (v[14] = 0),
              (v[15] = -1),
              (v[16] = 0),
              (v[17] = 0),
              (v[18] = -1),
              (v[19] = 0),
              (v[20] = 0),
              (v[21] = -1),
              (v[22] = 0),
              (v[23] = 0),
              (v[24] = 0),
              (v[25] = 1),
              (v[26] = 0),
              (v[27] = 0),
              (v[28] = 1),
              (v[29] = 0),
              (v[30] = 0),
              (v[31] = 1),
              (v[32] = 0),
              (v[33] = 0),
              (v[34] = 1),
              (v[35] = 0),
              (v[36] = 0),
              (v[37] = -1),
              (v[38] = 0),
              (v[39] = 0),
              (v[40] = -1),
              (v[41] = 0),
              (v[42] = 0),
              (v[43] = -1),
              (v[44] = 0),
              (v[45] = 0),
              (v[46] = -1),
              (v[47] = 0),
              (v[48] = -1),
              (v[49] = 0),
              (v[50] = 0),
              (v[51] = -1),
              (v[52] = 0),
              (v[53] = 0),
              (v[54] = -1),
              (v[55] = 0),
              (v[56] = 0),
              (v[57] = -1),
              (v[58] = 0),
              (v[59] = 0),
              (v[60] = 1),
              (v[61] = 0),
              (v[62] = 0),
              (v[63] = 1),
              (v[64] = 0),
              (v[65] = 0),
              (v[66] = 1),
              (v[67] = 0),
              (v[68] = 0),
              (v[69] = 1),
              (v[70] = 0),
              (v[71] = 0),
              (d.tangent = new o.GeometryAttribute({
                componentDatatype: i.ComponentDatatype.FLOAT,
                componentsPerAttribute: 3,
                values: v,
              }));
          }
          if (c.bitangent) {
            var h = new Float32Array(72);
            (h[0] = 0),
              (h[1] = 1),
              (h[2] = 0),
              (h[3] = 0),
              (h[4] = 1),
              (h[5] = 0),
              (h[6] = 0),
              (h[7] = 1),
              (h[8] = 0),
              (h[9] = 0),
              (h[10] = 1),
              (h[11] = 0),
              (h[12] = 0),
              (h[13] = 1),
              (h[14] = 0),
              (h[15] = 0),
              (h[16] = 1),
              (h[17] = 0),
              (h[18] = 0),
              (h[19] = 1),
              (h[20] = 0),
              (h[21] = 0),
              (h[22] = 1),
              (h[23] = 0),
              (h[24] = 0),
              (h[25] = 0),
              (h[26] = 1),
              (h[27] = 0),
              (h[28] = 0),
              (h[29] = 1),
              (h[30] = 0),
              (h[31] = 0),
              (h[32] = 1),
              (h[33] = 0),
              (h[34] = 0),
              (h[35] = 1),
              (h[36] = 0),
              (h[37] = 0),
              (h[38] = 1),
              (h[39] = 0),
              (h[40] = 0),
              (h[41] = 1),
              (h[42] = 0),
              (h[43] = 0),
              (h[44] = 1),
              (h[45] = 0),
              (h[46] = 0),
              (h[47] = 1),
              (h[48] = 0),
              (h[49] = 0),
              (h[50] = 1),
              (h[51] = 0),
              (h[52] = 0),
              (h[53] = 1),
              (h[54] = 0),
              (h[55] = 0),
              (h[56] = 1),
              (h[57] = 0),
              (h[58] = 0),
              (h[59] = 1),
              (h[60] = 0),
              (h[61] = 0),
              (h[62] = 1),
              (h[63] = 0),
              (h[64] = 0),
              (h[65] = 1),
              (h[66] = 0),
              (h[67] = 0),
              (h[68] = 1),
              (h[69] = 0),
              (h[70] = 0),
              (h[71] = 1),
              (d.bitangent = new o.GeometryAttribute({
                componentDatatype: i.ComponentDatatype.FLOAT,
                componentsPerAttribute: 3,
                values: h,
              }));
          }
          ((x = new Uint16Array(36))[0] = 0),
            (x[1] = 1),
            (x[2] = 2),
            (x[3] = 0),
            (x[4] = 2),
            (x[5] = 3),
            (x[6] = 6),
            (x[7] = 5),
            (x[8] = 4),
            (x[9] = 7),
            (x[10] = 6),
            (x[11] = 4),
            (x[12] = 8),
            (x[13] = 9),
            (x[14] = 10),
            (x[15] = 8),
            (x[16] = 10),
            (x[17] = 11),
            (x[18] = 14),
            (x[19] = 13),
            (x[20] = 12),
            (x[21] = 15),
            (x[22] = 14),
            (x[23] = 12),
            (x[24] = 18),
            (x[25] = 17),
            (x[26] = 16),
            (x[27] = 19),
            (x[28] = 18),
            (x[29] = 16),
            (x[30] = 20),
            (x[31] = 21),
            (x[32] = 22),
            (x[33] = 20),
            (x[34] = 22),
            (x[35] = 23);
        } else
          ((b = new Float64Array(24))[0] = a.x),
            (b[1] = a.y),
            (b[2] = a.z),
            (b[3] = f.x),
            (b[4] = a.y),
            (b[5] = a.z),
            (b[6] = f.x),
            (b[7] = f.y),
            (b[8] = a.z),
            (b[9] = a.x),
            (b[10] = f.y),
            (b[11] = a.z),
            (b[12] = a.x),
            (b[13] = a.y),
            (b[14] = f.z),
            (b[15] = f.x),
            (b[16] = a.y),
            (b[17] = f.z),
            (b[18] = f.x),
            (b[19] = f.y),
            (b[20] = f.z),
            (b[21] = a.x),
            (b[22] = f.y),
            (b[23] = f.z),
            (d.position = new o.GeometryAttribute({
              componentDatatype: i.ComponentDatatype.DOUBLE,
              componentsPerAttribute: 3,
              values: b,
            })),
            ((x = new Uint16Array(36))[0] = 4),
            (x[1] = 5),
            (x[2] = 6),
            (x[3] = 4),
            (x[4] = 6),
            (x[5] = 7),
            (x[6] = 1),
            (x[7] = 0),
            (x[8] = 3),
            (x[9] = 1),
            (x[10] = 3),
            (x[11] = 2),
            (x[12] = 1),
            (x[13] = 6),
            (x[14] = 5),
            (x[15] = 1),
            (x[16] = 2),
            (x[17] = 6),
            (x[18] = 2),
            (x[19] = 3),
            (x[20] = 7),
            (x[21] = 2),
            (x[22] = 7),
            (x[23] = 6),
            (x[24] = 3),
            (x[25] = 0),
            (x[26] = 4),
            (x[27] = 3),
            (x[28] = 4),
            (x[29] = 7),
            (x[30] = 0),
            (x[31] = 1),
            (x[32] = 5),
            (x[33] = 0),
            (x[34] = 5),
            (x[35] = 4);
        var z = r.Cartesian3.subtract(f, a, p),
          w = 0.5 * r.Cartesian3.magnitude(z);
        if (t.defined(e._offsetAttribute)) {
          var F = b.length,
            g = new Uint8Array(F / 3),
            k = e._offsetAttribute === y.GeometryOffsetAttribute.NONE ? 0 : 1;
          s.arrayFill(g, k),
            (d.applyOffset = new o.GeometryAttribute({
              componentDatatype: i.ComponentDatatype.UNSIGNED_BYTE,
              componentsPerAttribute: 1,
              values: g,
            }));
        }
        return new o.Geometry({
          attributes: d,
          indices: x,
          primitiveType: m.PrimitiveType.TRIANGLES,
          boundingSphere: new n.BoundingSphere(r.Cartesian3.ZERO, w),
          offsetAttribute: e._offsetAttribute,
        });
      }
    }),
    (c.getUnitBox = function () {
      return (
        t.defined(x) ||
          (x = c.createGeometry(
            c.fromDimensions({
              dimensions: new r.Cartesian3(1, 1, 1),
              vertexFormat: f.VertexFormat.POSITION_ONLY,
            }),
          )),
        x
      );
    }),
    (e.BoxGeometry = c);
});
